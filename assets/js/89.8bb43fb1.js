(window.webpackJsonp=window.webpackJsonp||[]).push([[89],{466:function(n,e,t){"use strict";t.r(e);var a=t(28),s=Object(a.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h2",{attrs:{id:"文件夹说明"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#文件夹说明"}},[n._v("#")]),n._v(" 文件夹说明")]),n._v(" "),t("ul",[t("li",[t("h3",{attrs:{id:"et外部文件夹"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#et外部文件夹"}},[n._v("#")]),n._v(" ET外部文件夹")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("├─Config 一些配置文件 服务器和数据库参数以及项目json数据\n├─FileServer 资源服务器的打包文件\n├─Logs 服务器Log日志\n├─Proto \n│   ├─protoc.exe   proto文本转C#工具\n│   ├─HotfixMessage.proto 服务器与客户端之间的数据传输结构(可热更)\n│   ├─InnerMessage.proto  服务器和服务器之间的数据传输结构\n│   └─OuterMessage.proto  服务器与客户端之间的数据传输结构\n├─Release 文件打包\n├─Server 服务器代码\n├─Tools  一些工具的项目工程 如资源服务器，proto2C#等\n└─Unity  客户端工程\n")])])])]),n._v(" "),t("li",[t("h3",{attrs:{id:"客户端"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#客户端"}},[n._v("#")]),n._v(" 客户端")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("├─Bundles 所有项目需要使用的预制件\n│     ├─Independent 热更代码和配置数据的预制件\n│     └─Project  项目的预制件\n│          ├─Common 通用预制件\n│          └─UI  UI预制件\n├─DemoTest 测试用的文件夹 所有测试脚本以及测试场景放这里\n├─Editor 编辑器脚本\n├─Hotfix 热更代码\n│   ├─Base 热更的基础代码\n│   ├─Module 模块功能\n│   ├─Project 项目代码\n│   └─Entity 实体类\n├─Model 本地代码\n│   ├─Base 本地的基础代码\n│   ├─Component 组件类\n│   ├─Entity 实体类\n│   ├─Helper 一些通用的静态类\n│   ├─ILBinding CLR绑定 自动生成的代码\n│   ├─Module 模块代码\n│   └─Extension 扩展方法类\n├─OPS 代码混淆插件\n├─Res 资源文件如 模型，贴图，材质，动画等\n└─ThirdParty  第三方插件\n        ├─Demigiant  DotweenPro\n        ├─Google.Protobuf 数据传输\n        ├─MongoDB 数据库\n        ├─UITool 一些UI的通用工具\n        ├─HighlightPlus 高亮后处理\n        └─ILRuntime 代码热更\n")])])])]),n._v(" "),t("li",[t("h3",{attrs:{id:"服务端"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#服务端"}},[n._v("#")]),n._v(" 服务端")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("├─App 服务器入口\n│     ├─Program.cs 服务器入口代码\n├─Hotfix 热更代码\n│   ├─Handler 数据接收处理类\n│   ├─Module 模块功能\n│   └─Helper 静态工具类\n├─Model 本地代码\n│   ├─Base 本地的基础代码\n│   ├─Component 组件类\n│   ├─Entity 实体类\n│   ├─Helper 一些通用的静态类\n│   └─Module 模块代码\n└─ThirdParty  第三方插件\n        ├─KcpLib  通讯协议\n        └─MongoDBDriver 数据库\n")])])])])]),n._v(" "),t("h2",{attrs:{id:"创建脚本"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建脚本"}},[n._v("#")]),n._v(" 创建脚本")]),n._v(" "),t("ul",[t("li",[t("h3",{attrs:{id:"项目的入口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#项目的入口"}},[n._v("#")]),n._v(" 项目的入口")]),n._v(" "),t("ul",[t("li",[n._v("项目入口的脚本 （Model层）")])]),n._v(" "),t("img",{attrs:{src:n.$withBase("/image/project/modelinit.png"),alt:"mixureSecure"}}),n._v(" "),t("ul",[t("li",[n._v("项目入口的脚本（HotFix层）")])]),n._v(" "),t("img",{attrs:{src:n.$withBase("/image/project/Entrance.png"),alt:"mixureSecure"}}),n._v(" "),t("img",{attrs:{src:n.$withBase("/image/project/hotfixinit.png"),alt:"mixureSecure"}})]),n._v(" "),t("li",[t("h3",{attrs:{id:"创建et脚本"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建et脚本"}},[n._v("#")]),n._v(" 创建ET脚本")])])]),n._v(" "),t("img",{attrs:{src:n.$withBase("/image/project/createETscripts.png"),alt:"mixureSecure"}}),n._v(" "),t("ul",[t("li",[t("p",[n._v("Component 创建组件脚本")]),n._v(" "),t("p",[n._v("创建完成后会自动生成模板脚本，目前会自动生成Awake Start Update 3个常用函数")])])]),n._v(" "),t("div",{staticClass:"language-c# extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("using ETModel;\nusing System.Collections;\nusing System.Collections.Generic;\nnamespace ETHotfix\n{\n    [ObjectSystem]\n    public class SampleComponentAwakeSystem : AwakeSystem<SampleComponent>\n    {\n        public override void Awake(SampleComponent self)\n        {\n           self.Awake();\n        }\n    }\n   [ObjectSystem]\n   public class SampleComponentStartSystem : StartSystem<SampleComponent>\n   {\n       public override void Start(SampleComponent self)\n       {\n           self.Start();\n       }\n   }\n   \n   [ObjectSystem]\n   public class SampleComponentUpdateSystem : UpdateSystem<SampleComponent>\n   {\n       public override void Update(SampleComponent self)\n       {\n           self.Update();\n       }\n   }\n   \n   public class SampleComponent : Component\n   {\n       internal void Awake()\n       {\n           //Do SomeThing.....\n       }\n   \n       internal void Start()\n       {\n           //Do SomeThing.....\n       }\n   \n       internal void Update()\n       {\n           //Do SomeThing.....\n       }\n   }\n}\n")])])]),t("ul",[t("li",[t("p",[n._v("Event 事件类")]),n._v(" "),t("div",{staticClass:"language-c# extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('using ETModel;\n  using System.Collections;\n  using System.Collections.Generic;\n  using UnityEngine;\n  \n  namespace EventArgType \n  {\n      public struct ScriptName \n      {\n          //事件脚本需要传的参数\n      }\n  }\n  \n  namespace ETHotfix\n  {\n      public partial class EventIdType\n      {\n          public const string ScriptName = "ScriptName"; 事件的名称\n      }\n  \n      [Event(EventIdType.ScriptName)]\n      public class ScriptName : AEvent<EventArgType.ScriptName>\n      {\n          public override void Run(EventArgType.ScriptName arg)\n          {\n               //事件的执行\n          }\n      }\n  }\n')])])])])])])}),[],!1,null,null,null);e.default=s.exports}}]);