(window.webpackJsonp=window.webpackJsonp||[]).push([[94],{471:function(t,e,a){"use strict";a.r(e);var n=a(28),r=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"git"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git"}},[t._v("#")]),t._v(" GIT")]),t._v(" "),a("ul",[a("li",[a("h4",{attrs:{id:"gitignore不起作用的解决方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gitignore不起作用的解决方法"}},[t._v("#")]),t._v(" GITIGNORE不起作用的解决方法")]),t._v(" "),a("p",[t._v("cmd进入对于的项目文件夹 依次输入")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git rm -r --cached .\ngit add .\ngit commit -m 'update .gitignore'\n")])])])])]),t._v(" "),a("h1",{attrs:{id:"c"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#c"}},[t._v("#")]),t._v(" C#")]),t._v(" "),a("h2",{attrs:{id:"数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[t._v("#")]),t._v(" 数组")]),t._v(" "),a("ul",[a("li",[t._v("乱序")])]),t._v(" "),a("div",{staticClass:"language-c# extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("private List<string> GetRandomData(List<string> data)\n{\n    var temp = new List<string>(data);\n   \n    System.Random random = new System.Random();\n   \n    foreach (var item in data)\n    {\n        int c = random.Next(temp.Count);\n        temp.Insert(c, item);\n    }\n    return temp;\n}\n")])])]),a("h2",{attrs:{id:"枚举"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#枚举"}},[t._v("#")]),t._v(" 枚举")]),t._v(" "),a("ul",[a("li",[t._v("1<< 1  代表往左移动一位 表示2的1次方 以此类推")]),t._v(" "),a("li",[t._v("|  运算符 需要和flags属性一起用 表示多个状态集合 在设置枚举的值的时候需要用2的n次幂来避免相加后与枚举的值相等")])]),t._v(" "),a("h2",{attrs:{id:"反射"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#反射"}},[t._v("#")]),t._v(" 反射")]),t._v(" "),a("div",{staticClass:"language-c# extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("//获取类型对象所有的子类\nprivate static List<Type> GetAllChildClass(Type baseType)\n{\n     List<Type> typelist = new List<Type>();\n     List<Type> ts = ETModel.Game.Hotfix.GetHotfixTypes();\n     foreach (var item in ts)\n     {\n        if (item.BaseType == baseType)\n        {\n            typelist.Add(item);\n        }\n     }\n    return typelist;\n}\n\n         \n//反射复制对象属性\npublic static object MapperItem(Type targettypeName, object target)\n{\n   var type = Type.GetType(targettypeName.FullName);\n   var result = Activator.CreateInstance(type);\n   try\n   {\n      var targetType = target.GetType();\n      var resultType = result.GetType();\n      foreach (FieldInfo targetItem in targetType.GetFields())\n      {\n          foreach (FieldInfo resultItem in resultType.GetFields())\n          {\n            if (resultItem.Name == targetItem.Name)\n            {\n              resultItem.SetValue(result, targetItem.GetValue(target));\n              break;\n            }\n          }\n       }\n    }\n    catch (Exception ex)\n    {\n       Debug.Log(ex.StackTrace);\n    }\n    return result;\n}\n")])])]),a("div",{staticClass:"language-c# extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(' ///遍历List \n int count = Convert.ToInt32(value.GetType().GetProperty("Count").GetValue(value, null));\n for (int i = 0; i < count; i++)\n {\n   object listItem = value.GetType().GetProperty("Item").GetValue(value, new object[] { i });\n }\n')])])]),a("h1",{attrs:{id:"josn"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#josn"}},[t._v("#")]),t._v(" JOSN")]),t._v(" "),a("div",{staticClass:"language-c# extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("//多态 转JSON的时候，传入设置即可  转Object也需要作为参数\nNewtonsoft.Json.JsonSerializerSettings settings = new Newtonsoft.Json.JsonSerializerSettings()\n{\n   TypeNameHandling = Newtonsoft.Json.TypeNameHandling.All\n};\n")])])]),a("div",{staticClass:"language-c# extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('//Newtonsoft.Json  基类转子类\npublic abstract class JsonCreationConverter<T> : JsonConverter\n{\n\tprotected abstract T Create(Type objectType, JObject jsonObject);\n\tpublic override bool CanConvert(Type objectType)\n\t{\n\t\treturn typeof(T).IsAssignableFrom(objectType);\n\t}\n\n\tpublic override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)\n\t{\n\t\tvar jsonObject = JObject.Load(reader);\n\t\tvar target = Create(objectType, jsonObject);\n\t\tserializer.Populate(jsonObject.CreateReader(), target);\n\t\treturn target;\n\t}\n\n\tpublic override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)\n\t{\n\t\tthrow new NotImplementedException();\n\t}\n}\npublic class JsonBBBConverter : JsonCreationConverter<BBB>\n{\n\tprotected override BBB Create(Type objectType, JObject jsonObject)\n\t{\n\t\tvar typeName = jsonObject["Type"].ToString().Replace("\\"","");\n\t\tswitch (typeName)\n\t\t{\n\t\t\tcase "AAA":\n\t\t\t\treturn new AAA();\n\t\t\tcase "CCC":\n\t\t\t\treturn new CCC();\n\t\t\tdefault:\n\t\t\t\treturn null;\n\t\t}\n\t}\n}\npublic class AAA : BBB\n{\n\tpublic string Name;\n}\n\npublic class CCC : BBB\n{\n\tpublic int Age;\n}\n\npublic class BBB\n{\n\t[JsonProperty("Type")]\n\tpublic string JsonType;\n}\n')])])]),a("h1",{attrs:{id:"unity"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#unity"}},[t._v("#")]),t._v(" Unity")]),t._v(" "),a("h2",{attrs:{id:"animator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#animator"}},[t._v("#")]),t._v(" Animator")]),t._v(" "),a("ul",[a("li",[t._v("当删除某些没有K进动画的模型时  Avatar有可能会使动画失效")])]),t._v(" "),a("h1",{attrs:{id:"android"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#android"}},[t._v("#")]),t._v(" Android")]),t._v(" "),a("ul",[a("li",[a("h4",{attrs:{id:"读取本地文件-不能使用file-read等io的读取方式-需要使用www或者webrequest"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#读取本地文件-不能使用file-read等io的读取方式-需要使用www或者webrequest"}},[t._v("#")]),t._v(" 读取本地文件 不能使用File.Read等IO的读取方式 需要使用WWW或者WebRequest")]),t._v(" "),a("div",{staticClass:"language-c# extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("async Task<byte[]> LoadFile(string path)\n{\n    UnityWebRequest request = UnityWebRequest.Get(path);\n    await request.SendWebRequest();\n    if (!request.isHttpError && !request.isNetworkError)\n    {\n       return request.downloadHandler.data;\n    }\n    return null;\n}\n")])])])]),t._v(" "),a("li",[a("h4",{attrs:{id:"如果想要使用file-io去读取文件-需要先复制一份文件到本地文件夹"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如果想要使用file-io去读取文件-需要先复制一份文件到本地文件夹"}},[t._v("#")]),t._v(" 如果想要使用File IO去读取文件 需要先复制一份文件到本地文件夹")])])]),t._v(" "),a("div",{staticClass:"language-c# extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('async void Start()\n{\n    var path = Application.streamingAssetsPath + "/" + "data";\n    var savepath = Application.persistentDataPath + "/" + "data";  \n    _bytes = await LoadFile(path);\n    if (!File.Exists(savepath))\n    {\n       //创建文件\n       var fileSteam= File.Create(savepath);\n       fileSteam.Write(_bytes,0,_bytes.Length);\n       fileSteam.Close();\n    }\n    var filestream = File.Open(savepath,FileMode.Open);\n}\n')])])])])}),[],!1,null,null,null);e.default=r.exports}}]);